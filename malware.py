import os
import hashlib
import logging
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk  # For progress bar

# Configure logging
logging.basicConfig(filename='malware_scan.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# List of byte patterns representing malware signatures
Malware_Signatures = [
    b'\x90\x90\x90\x90',  # NOP sled
    b'\xEB\xFE',          # Infinite loop
    # Add more malware signatures here as needed
]

# List of known malicious file hashes (MD5, SHA256)
Known_Malicious_Hashes = {
    'md5': [
        '5d41402abc4b2a76b9719d911017c592',  # Example hash
        # Add more MD5 hashes
    ],
    'sha256': [
        'b94d27b9934d3e08a52e52d7da7dabfade4f5f1f04b8f95b28f7fabe71433423',  # Example hash
        # Add more SHA256 hashes
    ]
}

def calculate_file_hash(file_path, algorithm='md5'):
    """Calculates the hash of a file using the specified algorithm (MD5 or SHA256)."""
    try:
        with open(file_path, 'rb') as f:
            file_data = f.read()
            if algorithm == 'md5':
                return hashlib.md5(file_data).hexdigest()
            elif algorithm == 'sha256':
                return hashlib.sha256(file_data).hexdigest()
    except Exception as e:
        logging.error(f"Error calculating hash for {file_path}: {e}")
        return None

def scan_file_with_signatures(file_path):
    """Scan a file for known malware signatures."""
    try:
        with open(file_path, 'rb') as f:
            file_content = f.read()
            # Check for byte pattern signatures
            for signature in Malware_Signatures:
                if signature in file_content:
                    logging.warning(f"Malware signature found in {file_path}")
                    quarantine_file(file_path)
                    return True  # Potential malware detected
            
            # Check file hash against known malicious hashes
            md5_hash = calculate_file_hash(file_path, 'md5')
            sha256_hash = calculate_file_hash(file_path, 'sha256')
            if md5_hash in Known_Malicious_Hashes['md5'] or sha256_hash in Known_Malicious_Hashes['sha256']:
                logging.warning(f"Malware detected by hash in {file_path}")
                quarantine_file(file_path)
                return True  # Known malware detected
                
        return False  # No malware detected
    except PermissionError:
        logging.error(f"Permission denied: {file_path}")
        return False
    except FileNotFoundError:
        logging.error(f"File not found: {file_path}")
        return False
    except Exception as e:
        logging.error(f"Error reading {file_path}: {e}")
        return False

def quarantine_file(file_path):
    """Moves the detected malware file to a quarantine directory."""
    quarantine_dir = 'quarantine'
    os.makedirs(quarantine_dir, exist_ok=True)
    quarantine_path = os.path.join(quarantine_dir, os.path.basename(file_path))
    try:
        os.rename(file_path, quarantine_path)
        logging.info(f"File {file_path} moved to quarantine at {quarantine_path}")
    except Exception as e:
        logging.error(f"Failed to quarantine {file_path}: {e}")

def scan_directory(directory, progress_var, progress_label):
    """Scan all files in a directory for malware."""
    files_scanned = 0
    total_files = sum([len(files) for r, d, files in os.walk(directory)])
    for root_dir, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root_dir, file)
            # Update progress bar
            progress_var.set((files_scanned / total_files) * 100)
            progress_label.config(text=f"Scanning: {file_path}")
            root.update_idletasks()  # Correct usage of root
            
            # Log the file being scanned
            logging.info(f"Scanning file: {file_path}")
            
            if scan_file_with_signatures(file_path):
                logging.info(f"Malware detected in {file_path}")
            else:
                logging.info(f"No malware detected in {file_path}")
                
            files_scanned += 1

def start_scan():
    """Start the malware scan for the selected directory."""
    target_directory = filedialog.askdirectory()
    if target_directory:
        # Show loading screen
        loading_window = tk.Toplevel(root)
        loading_window.title("Scanning...")
        progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(loading_window, variable=progress_var, maximum=100)
        progress_bar.pack(pady=10)
        progress_label = tk.Label(loading_window, text="Scanning...")
        progress_label.pack(pady=10)
        
        # Scan directory
        scan_directory(target_directory, progress_var, progress_label)
        loading_window.destroy()  # Close loading screen after scan is complete
        messagebox.showinfo("Scan Complete", "Malware scan completed. Check the log for details.")
    else:
        messagebox.showwarning("No Directory Selected", "Please select a directory to scan.")

# GUI Setup
root = tk.Tk()
root.title("Malware Scanner")

# Create a Label
label = tk.Label(root, text="Select a directory to scan for malware")
label.pack(pady=20)

# Create a Scan Button
scan_button = tk.Button(root, text="Scan Directory", command=start_scan)
scan_button.pack(pady=10)

# Run the GUI
root.mainloop()
